// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
