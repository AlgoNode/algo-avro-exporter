// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
