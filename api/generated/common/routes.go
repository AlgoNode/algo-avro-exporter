// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NnX8iwGu8+3i9qfb/wkAAP//CWAj1Z2rAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
