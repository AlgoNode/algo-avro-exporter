// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"na9ndx/v/n8AAAD//5nScmJhpAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
