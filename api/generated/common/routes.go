// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
