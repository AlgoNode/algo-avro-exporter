// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
