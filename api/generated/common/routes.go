// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
