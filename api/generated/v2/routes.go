// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
