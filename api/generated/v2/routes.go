// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransactions(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-deleted":       true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":          true,
		"round":           true,
		"include-deleted": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":          true,
		"application-id":  true,
		"include-deleted": true,
		"limit":           true,
		"next":            true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":          true,
		"include-deleted": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":          true,
		"include-deleted": true,
		"limit":           true,
		"next":            true,
		"creator":         true,
		"name":            true,
		"unit":            true,
		"asset-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":          true,
		"include-deleted": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-deleted":       true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransactions(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransactions, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
