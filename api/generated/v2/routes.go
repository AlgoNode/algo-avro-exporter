// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
