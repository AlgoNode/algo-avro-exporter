// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransactions(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-deleted":       true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":          true,
		"round":           true,
		"include-deleted": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":          true,
		"application-id":  true,
		"include-deleted": true,
		"limit":           true,
		"next":            true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":          true,
		"include-deleted": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":          true,
		"include-deleted": true,
		"limit":           true,
		"next":            true,
		"creator":         true,
		"name":            true,
		"unit":            true,
		"asset-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":          true,
		"include-deleted": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-deleted":       true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-deleted" -------------
	if paramValue := ctx.QueryParam("include-deleted"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-deleted: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransactions(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransactions, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
